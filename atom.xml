<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Better Living Through Code]]></title>
  <link href="http://agoldvarg.github.io/atom.xml" rel="self"/>
  <link href="http://agoldvarg.github.io/"/>
  <updated>2014-11-02T22:35:22-05:00</updated>
  <id>http://agoldvarg.github.io/</id>
  <author>
    <name><![CDATA[Alex Goldvarg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hidden Files, Show Yourselves!]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/11/02/hidden-files-show-yourselves/"/>
    <updated>2014-11-02T18:36:35-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/11/02/hidden-files-show-yourselves</id>
    <content type="html"><![CDATA[<p>&ldquo;How do you show hidden files in Finder?&rdquo;</p>

<p>I had no idea but after some googling I wasn&rsquo;t surprised to find that I could change this setting by entering this simple command into terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ defaults write com.apple.finder AppleShowAllFiles YES #Use 'NO' to reverse the effect</span></code></pre></td></tr></table></div></figure>


<p>The change will only take effect after Finder has been restarted - for which we can use the handy <code>killall</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ killall Finder /System/Library/CoreServices/Finder.app</span></code></pre></td></tr></table></div></figure>


<p>Bingo, now I can see hidden files and folders in Finder! But lets take this a step further by creating aliases in <code>.bash_profile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias showF='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
</span><span class='line'>alias hideF='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'</span></code></pre></td></tr></table></div></figure>


<p>Now, I can easily toggle the setting from the command line using my aliases:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ showF #or hideF</span></code></pre></td></tr></table></div></figure>


<p>Learning ways to add efficiency to my workflow has been one of my favorite parts of this programming journey. I&rsquo;m looking at each and every repeated task as a new automation challenge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go on, Git]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/09/13/go-on-git/"/>
    <updated>2014-09-13T13:04:34-04:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/09/13/go-on-git</id>
    <content type="html"><![CDATA[<p>Git(hub) - I&rsquo;ve come across it so many times but never actually taken the plunge. Luckily it&rsquo;s very straight forward. There are plenty of great guides already out there but this post gives me a chance to practice using git and markdown.</p>

<h2>Initial Setup</h2>

<p>OK, so the first step was to <a href="http://git-scm.com/">install git</a> on my local machine and create an account on <a href="https://github.com/join">github</a>.</p>

<p>I like using a top-level folder named git which makes it easy to keep track of  my repositiories. The very first thing I needed to do was define my name and email address within git.  To do so, I ran the following two commands in terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global user.name "YourName"
</span><span class='line'>$ git config --global user.email youremail@example.com</span></code></pre></td></tr></table></div></figure>


<p>To verify, I can run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --list</span></code></pre></td></tr></table></div></figure>


<h2>A Project Is Born</h2>

<p>Git works as a version tracking framework that allows for one or multiple people to collaborate on and manage simultaneus streams when working on a project. So for every project, I can have a centralized master version (in this example I&rsquo;m hosting my repository on github) and as many local working versions as I want. Git is so awesome.</p>

<p>Using the terminal, I can create a local project folder by entering in the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Navigate to your git folder
</span><span class='line'>$ cd git
</span><span class='line'>
</span><span class='line'># Create a folder for my new project
</span><span class='line'>$ mkdir -p party_time
</span><span class='line'>
</span><span class='line'># Navigate to the new folder and create an essential file
</span><span class='line'>$ cd party_time
</span><span class='line'>$ touch invitees.markdown</span></code></pre></td></tr></table></div></figure>


<p>I need to tell git to start paying attention to this project.</p>

<p>So I enter the following command to initialize the git repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init</span></code></pre></td></tr></table></div></figure>


<p>All I&rsquo;ve done is create an empty repository on github that is ready to accept my files!</p>

<p>After I figured out who I want to invite, I needed to tell git to gather the files to be commited:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .</span></code></pre></td></tr></table></div></figure>


<p>To add a comment and Commit the file(s):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m "Initial deploy of invitees" -a</span></code></pre></td></tr></table></div></figure>


<p>Now I had to define the link between my local and remote repositories for this project. I have to tell git where it should be pushing and pulling from (in this case it will be my github url).</p>

<p>After creating a public repository named party-time:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add origin ssh://git@github.com:yourusername/party-time.git
</span><span class='line'>
</span><span class='line'># Check it by pulling back a list of remote repositories
</span><span class='line'>$ git remote -v</span></code></pre></td></tr></table></div></figure>


<p>Finally, I&rsquo;ll <strong>push</strong> my file to the remote repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p>If everything went according to plan, my local and remote repositories are synced.</p>

<p> I like to pull down a fresh copy of my remote repository before messing around with existing files on my local machine.  I do this to ensure that everything is in sync by entering:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git pull origin master</span></code></pre></td></tr></table></div></figure>


<p>So, an easy example for getting familiar with git. Next step, a real code  project on my repository!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[// DOG Part I]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/09/12/slash-slash-dog-part-i/"/>
    <updated>2014-09-12T22:44:49-04:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/09/12/slash-slash-dog-part-i</id>
    <content type="html"><![CDATA[<p>So I’ve always been meaning to write up a guide about how I built and setup my very own personal home media server. The following is meant to be both a memoir and an easy to follow guide that should spell out the process itself and hopefully help others avoid some of the pitfalls that I struggled through but eventually triumphed over. There is SO much to cover, so I’ll be breaking this out into a multi-part series – and off we go!</p>

<h2>A Growing Problem</h2>

<p>I found myself stuck in a recurring cycle. I would buy a new external hard drive and after a period of time, I’d inevitably start running out of space. My only option was to buy another one with a larger capacity. And every time I’d have to go through the painful process of scrubbing and copying all of my data from the old drive to the new drive. It&rsquo;s never fun having to decide “do I really need all 139 episodes of MacGyver?” (of course, the answer to that question is “Yes”). In order to backup the new, and largest capacity, drive I had to spread my files across multiple lower capacity drives. This process was not only prohibitively expensive; it left me with a point in time backup, as opposed to a live-backup.</p>

<p>Clearly I needed a better solution so I started researching the various options out there for backing up, accessing, and streaming my data.</p>

<h2>Requirements</h2>

<p>I learned that choosing the right backup solution totally depends on one&rsquo;s individual needs. My requirements were as follows:</p>

<ul>
<li> Must be expandable. Adding additional capacity down the road should be relatively painless.</li>
<li> Must be remotely accessible. I want to be able to stream data to PCs on my local wireless network, an existing small form factor HTPC, and a rasberri pi.  Mobile streaming is a bonus but wasn’t an absolute must-have.</li>
<li> Must automatically provide data redundancy (i.e. backup!).</li>
<li> Must be able to incorporate all, or at least some, of my existing HDDs</li>
<li> Low-Cost: I wasn&rsquo;t looking to break the bank</li>
</ul>


<h2>To RAID? Or not to RAID? <em>Or unRAID?</em></h2>

<p>You may already have heard of RAID (Redundant Array of Inexpensive or Independent Disks) which to put it simply is a technology for combining multiple drives into a logical unit for data storage. Depending on the type of RAID implementation there are different benefits and drawbacks: be it speed, space, security, etc. which for the purposes of this post I won&rsquo;t delve into. I found that a spin off of RAID, appropriately named unRAID, seemed to offer the best combination of features for my needs.</p>

<p>What is unRAID exactly and why should I care? Well, <a href="http://lime-technology.com/technology/">this website</a> does a pretty good job of explaining it but unRAID was specifically designed for storing and serving digital media across a network while protecting it at the same time. unRAID also would allow me to reuse the hard drives I already own, add capacity as needed, automatically back up my data - unRAID calls this “Parity.” It really seemed like I found…  <strong>THE ALMOST PERFECT SOLUTION!</strong></p>

<p>So having chosen my RAID implementation of choice my next move was to pick out the hardware…</p>

<h2>The little server that could</h2>

<p>One of the best things about building an unRAID server is the optionality one has in terms of hardware choices. Being that unRAID is Linux based, the hardware combinations one can use are nearly endless – which may seem kind of overwhelming at  first. In my case, I wasn’t looking to buy and build a PC component by component so I started researching semi-complete server boxes that would run unRAID.</p>

<p>Luckily, HP just happens to sell these sweet little compact servers with multiple drive capacity. There were several posts on unRAID forums from users who had great success using them as media servers and when I found one of them on sale through Newegg, I pounced. The specific model was the N40L HP Microserver, with a 5-drive capacity (although more than 5 drives can be squeezed in there with a little creativity).</p>

<p>What I loved:</p>

<ul>
<li> Low power draw and very quiet</li>
<li> Compact form factor</li>
<li> Easy Access / Easy Drive Swapping</li>
<li> CHEAP!</li>
</ul>


<p>What I didn&rsquo;t love:</p>

<ul>
<li> Low-Power CPU/GPU – Limits transcoding capability for Plex Purposes</li>
</ul>


<p>The total storage capacity could go up to 20TB using 4TB individual drives. This would give me plenty of headroom for years to come – and as I mentioned earlier unRAID makes increasing capacity very easy so I could always upgrade to larger drives down the road.</p>

<p>Don&rsquo;t get me wrong, you can certainly choose components piece by piece but as far I was concerned the microserver suited my needs just fine.  There were a few other items I needed to purchase before I could get started:</p>

<ul>
<li> USB Key to store and run the actual unRAID software (Required)</li>
<li> 5.25” Drive Bay for adding the 5th Drive (Optional)</li>
<li> eSATA to SATA cable for adding a 6th drive (Optional)</li>
<li> Small SSD to act as an App drive (Optional) – I’ll get into this later</li>
</ul>


<p>With all of my purchases made, I was ready to roll. In part II of this guide, we&rsquo;ll get into the build and software configuration process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WELL HELLO THERE]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/09/12/well-hello-there/"/>
    <updated>2014-09-12T20:36:18-04:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/09/12/well-hello-there</id>
    <content type="html"><![CDATA[<p>My name is Alex. This is my very first post and I couldn&rsquo;t be more excited. This blog will be a record of my quest for code literacy. In between, I might even throw in some wildcard content! Like a media server guide, or an op ed!</p>

<p>I&rsquo;ve been going H.A.M. on <a href="http://www.codecademy.com/">Codecademy</a>. Fankly, it&rsquo;s been very challenging but in the best way possible. So now having a bit of HTML, CSS, and Java under my belt I&rsquo;ll be focusing primarily on Ruby going forward.</p>

<p>In addition to keeping track of my coding trials and tribulations, I&rsquo;m also really looking forward to documenting some of my thoughts on technology. Let&rsquo;s do this!</p>
]]></content>
  </entry>
  
</feed>
