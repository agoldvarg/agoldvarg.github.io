<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Better Living Through Code]]></title>
  <link href="http://agoldvarg.github.io/atom.xml" rel="self"/>
  <link href="http://agoldvarg.github.io/"/>
  <updated>2015-02-25T00:21:20-05:00</updated>
  <id>http://agoldvarg.github.io/</id>
  <author>
    <name><![CDATA[Alex Goldvarg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[An Introduction to Ruby's .send Method]]></title>
    <link href="http://agoldvarg.github.io/blog/2015/02/21/sending-out-an-sos/"/>
    <updated>2015-02-21T12:32:30-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2015/02/21/sending-out-an-sos</id>
    <content type="html"><![CDATA[<h2>.send</h2>

<p>Beards, you love them. Why? I&rsquo;m going to tell you. But first, let&rsquo;s talk about Ruby&rsquo;s <code>.send</code> method. Let&rsquo;s look at a few simple examples:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">square</span>
</span><span class='line'>  <span class="nb">self</span> <span class="o">**</span> <span class="mi">2</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="mi">9</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:square</span><span class="p">)</span>
</span><span class='line'><span class="s2">&quot;Profound String&quot;</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="ss">:reverse</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; 81</span>
</span><span class='line'><span class="c1">#=&gt; &quot;gnirtS dnuoforP&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="mi">2</span><span class="o">.</span><span class="n">send</span> <span class="s1">&#39;+&#39;</span><span class="p">,</span> <span class="mi">5</span>
</span><span class='line'><span class="c1">#=&gt; 7</span>
</span><span class='line'><span class="c1"># 2 is the message recipient, + is the sender, or method, </span>
</span><span class='line'><span class="c1"># and 5 is the argument. Equivalent to 2 + 7.</span>
</span><span class='line'>
</span><span class='line'><span class="n">a</span> <span class="o">=</span> <span class="s2">&quot;upcase&quot;</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; &quot;UPCASE&quot;</span>
</span><span class='line'><span class="c1"># Whooaaaaaa, metaaaaa</span>
</span></code></pre></td></tr></table></div></figure>


<p>At first glance, send might not really seem that useful but it can come in handy when abstracting - one of our favorite things to do!  Let&rsquo;s say that we have a class named <code>Beard</code> that we want to instantiate and assign attributes to:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Beard</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:style</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">alex</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Alex&#39;s Beard&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="s2">&quot;Wispy Wiggins&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="no">Beard</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="k">do</span> <span class="o">|</span><span class="n">b</span><span class="o">|</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">alex</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="n">b</span><span class="o">.</span><span class="n">style</span> <span class="o">=</span> <span class="n">alex</span><span class="o">[</span><span class="ss">:style</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; #&lt;Beard:0x007fca52f567d8 @name=&quot;Alex&#39;s Beard&quot;, @style=&quot;Wispy Wiggins&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the code above works by literally calling each attribute and assigning them individually. Literals present great opportunities for abstraction:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Beard</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">assign_values</span><span class="p">(</span><span class="nb">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="nb">hash</span><span class="o">.</span><span class="n">each_key</span> <span class="k">do</span> <span class="o">|</span><span class="n">attribute</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">send</span><span class="p">(</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">attribute</span><span class="si">}</span><span class="s2">=&quot;</span> <span class="p">,</span> <span class="nb">hash</span><span class="o">[</span><span class="n">attribute</span><span class="o">]</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># In english...</span>
</span><span class='line'><span class="c1"># Take each key/or attribute (e.g. name, style)</span>
</span><span class='line'><span class="c1"># Interpolate the attribute to construct a method (e.g. `name=`)</span>
</span><span class='line'><span class="c1"># Assign the values (e.g. &quot;Alex&#39;s Beard&quot;)</span>
</span><span class='line'><span class="c1"># All together:</span>
</span><span class='line'><span class="c1">#   alex[:name] = &quot;Alex&#39;s Beard&quot;</span>
</span><span class='line'><span class="c1">#   alex[:style] = &quot;Wispy Wiggins&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Beard</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">a</span><span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">assign_values</span><span class="p">(</span><span class="n">alex</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; #&lt;Beard:0x007f8af318a170 @name=&quot;Alex&#39;s Beard&quot;, @style=&quot;Wispy Wiggins&quot;&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s review what&rsquo;s going on right there. The assign_values method passes each key from the attribute hash to self. In this context, self represents an instance of the Beard class. More specifically, this particular each method builds setter methods by interpolating the attribute and appending &ldquo;=&rdquo; to the end. The actual value from <code>hash[attribute]</code> is passed in as an argument. Blargh, word soup! What does is all mean? It means one less piece of code to maintain given an expanding or changing set of attributes belonging to the class. Nice!</p>

<p>Ruby is kind.</p>

<h2>Closing Thoughts</h2>

<iframe src="//giphy.com/embed/12eFpo8m9htKfu?html5=true" width="480" height="291" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keyword Arguments]]></title>
    <link href="http://agoldvarg.github.io/blog/2015/02/14/keyword-arguments/"/>
    <updated>2015-02-14T22:13:50-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2015/02/14/keyword-arguments</id>
    <content type="html"><![CDATA[<p>Keyword arguments were rolled out as part of the Ruby 2.0 release. And recently I&rsquo;ve run into them as part of the &lsquo;Green Grocer&rsquo; lab at <a href="http://flatironschool.com/">Flatiron</a>. I worked my way through the lab but I didn&rsquo;t fully grasp what was going on. So through this blog post I hope to solidify the concept.</p>

<p>Let&rsquo;s start with a simple method <code>manipulate_string</code> that expects to receive two arguments; a String followed by an Integer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">manipulate_string</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">volume</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">volume</span> <span class="o">&gt;</span> <span class="mi">6</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">string</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">string</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="s2">&quot;let&#39;s jam&quot;</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="s2">&quot;bingo bango&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1"># as expected:</span>
</span><span class='line'><span class="c1">#=&gt; LET&#39;S JAM</span>
</span><span class='line'><span class="c1">#=&gt; bingo bango</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># But, if we get a little bit wild:</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="s2">&quot;time to jam&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;bingo bango&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; ArgumentError: wrong number of arguments (1 for 2)</span>
</span><span class='line'><span class="c1">#=&gt; ArgumentError: comparison of String with 6 failed</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, the <code>manipulate_string</code> method does exactly what its asked. But knowing that computers don&rsquo;t make assumptions we can&rsquo;t expect the ruby interpreter to decide which argument is which.</p>

<p>In other words, this method as written lacks <a href="https://en.wikipedia.org/wiki/Robustness_%28computer_science%29">robustness</a> in two obvious ways. It can only respond to the exact amount of arguments expected and it&rsquo;s arguments must be given in the exact order as defined in the method.</p>

<p>We can code around the first weakness pretty easily by assigning defaults to an argument. For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">manipulate_string</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">volume</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">volume</span> <span class="o">&gt;</span> <span class="mi">6</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">string</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">string</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="s2">&quot;let&#39;s jam&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; let&#39;s jam</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it&rsquo;s a bit more difficult to protect against the second issue where we attempt to pass arguments out of order&hellip;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">manipulate_string</span><span class="p">(</span><span class="n">string</span><span class="p">,</span> <span class="n">volume</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">string</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="nb">String</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">volume</span> <span class="o">&gt;</span> <span class="mi">6</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">string</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">string</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">new_string</span> <span class="o">=</span> <span class="n">volume</span>
</span><span class='line'>    <span class="n">new_volume</span> <span class="o">=</span> <span class="n">string</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">new_volume</span> <span class="o">&gt;</span> <span class="mi">6</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">new_string</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="n">new_string</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s2">&quot;bingo bango&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="s2">&quot;bingo bango&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; bingo bango</span>
</span><span class='line'><span class="c1">#=&gt; bingo bango</span>
</span></code></pre></td></tr></table></div></figure>


<p>Our method is getting ugly very quickly. And the prior fix didn&rsquo;t really address the issue completely. Maybe we could modify our method to accept a hash with default values:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">manipulate_string</span><span class="p">(</span><span class="n">options</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="ss">volume</span><span class="p">:</span> <span class="mi">5</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:volume</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">6</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">options</span><span class="o">[</span><span class="ss">:string</span><span class="o">].</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">options</span><span class="o">[</span><span class="ss">:string</span><span class="o">].</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Good Times&quot;</span><span class="p">,</span> <span class="ss">volume</span><span class="p">:</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">volume</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Be Quiet&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; GOOD TIMES</span>
</span><span class='line'><span class="c1">#=&gt; be quiet</span>
</span></code></pre></td></tr></table></div></figure>


<p>The previous revision works a <em>little bit</em> better in that we can now accept arguments in any order. But what happens if we leave out one of the arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Be Quiet&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; NoMethodError: undefined method `&gt;&#39; for nil:NilClass</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can see that we run into the number of required arguments issue again. This is fixable but our method is going to get more complex:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">manipulate_string</span><span class="p">(</span> <span class="n">options</span> <span class="o">=</span> <span class="p">{}</span> <span class="p">)</span>
</span><span class='line'>  <span class="n">defaults</span> <span class="o">=</span> <span class="p">{</span> <span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="ss">volume</span><span class="p">:</span> <span class="mi">5</span> <span class="p">}</span>
</span><span class='line'>  <span class="n">options</span> <span class="o">=</span> <span class="n">defaults</span><span class="o">.</span><span class="n">merge</span><span class="p">(</span><span class="n">options</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="n">options</span><span class="o">[</span><span class="ss">:volume</span><span class="o">]</span> <span class="o">&gt;</span> <span class="mi">6</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">options</span><span class="o">[</span><span class="ss">:string</span><span class="o">].</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">options</span><span class="o">[</span><span class="ss">:string</span><span class="o">].</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Good Times&quot;</span><span class="p">,</span> <span class="ss">volume</span><span class="p">:</span> <span class="mi">9</span><span class="p">)</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">volume</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Be Quiet&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Be Quiet&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; GOOD TIMES</span>
</span><span class='line'><span class="c1">#=&gt; be quiet</span>
</span><span class='line'><span class="c1">#=&gt; be quiet</span>
</span></code></pre></td></tr></table></div></figure>


<p>WAHOOO! We did it! Although something about the above revision just doesn&rsquo;t <em>feel</em> very Ruby-like. You might be thinking - &ldquo;when is he going to get to the point?!&rdquo; OK, here we go - by using <strong>Keyword Arguments</strong>, we can vastly improve the simplicity and readibility of our previous method without sacrificing any of the functionality. Let&rsquo;s take a look at our example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">manipulate_string</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Nice to see you&quot;</span><span class="p">,</span> <span class="ss">volume</span><span class="p">:</span> <span class="mi">7</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">volume</span> <span class="o">&gt;</span> <span class="mi">6</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">string</span><span class="o">.</span><span class="n">upcase</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">string</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice the <code>key: value</code> structure as we define the arguments? We can call this new and improved method without worrying about missing and/or out-of-order arguments:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">volume</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span> <span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Be Quiet&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">string</span><span class="p">:</span> <span class="s2">&quot;Good Times&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">manipulate_string</span><span class="p">(</span><span class="ss">volume</span><span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; be quiet</span>
</span><span class='line'><span class="c1">#=&gt; GOOD TIMES</span>
</span><span class='line'><span class="c1">#=&gt; nice to see you</span>
</span></code></pre></td></tr></table></div></figure>


<p>Wonderful! So Ruby can posit that you&rsquo;re passing in hash pairs for these arguments. It also knows that you want to have defaults, and it doesn&rsquo;t care what order you pass each argument into the method. Now that&rsquo;s what I call robust!</p>

<h2>Closing Thoughts</h2>

<p>To sum it up, keyword arguments allow you to create dynamic methods able to accept arguments in a multitude of ways. I&rsquo;ll be keeping this tool handy when coding methods going forward. Thanks for reading and keep coding!</p>

<p><strong>Resources</strong></p>

<ul>
<li>Cooper Press - <a href="https://www.youtube.com/watch?v=u8Q6Of_mScI">6 Minute Guide to Keyword Arguments in Ruby 2.0</a></li>
<li>Seiji Naganuma - <a href="http://www.seijinaganuma.com/2015/02/keyword-arguments-in-ruby/">Keyword Arguments in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Right Stop. Enumerate and Listen...]]></title>
    <link href="http://agoldvarg.github.io/blog/2015/02/10/all-right-stop/"/>
    <updated>2015-02-10T20:48:31-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2015/02/10/all-right-stop</id>
    <content type="html"><![CDATA[<p>&hellip;Ruby&rsquo;s back with a brand new iteration.</p>

<iframe src="//giphy.com/embed/ufXEskx0lCtxK?html5=true" width="336" height="189" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>You heard right, the <a href="http://ruby-doc.org/core-2.2.0/Enumerable.html">Enumerable</a> mixin is all about <strong>iteration</strong>, <strong>manipulation</strong> (and  heavy helping of <strong>consternation</strong>).</p>

<p>Learning how to use Enumerable methods to manipulate data and objects has been one the most exciting revelations since starting to program with Ruby. But to truly understand Enumerable, it helps to drill-down into what the methods are actually doing with the data inputs, how they yield in and out of passed blocks, and finally what kind of results they return.</p>

<h2>Collect</h2>

<p>Within Enumerable, there are several methods that can be used to search through, or filter over a collection of elements. Let&rsquo;s look at <code>collect</code>.  The collect method returns a new array after it yields each element in the original collection into the passed block. Here&rsquo;s a simple example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">avi_says</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Cool&quot;</span><span class="p">,</span> <span class="s2">&quot;So yea&quot;</span><span class="p">,</span> <span class="s2">&quot;Come on&quot;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">excited_avi_says</span> <span class="o">=</span> <span class="n">avi_says</span><span class="o">.</span><span class="n">collect</span> <span class="p">{</span> <span class="o">|</span><span class="n">phrase</span><span class="o">|</span> <span class="n">phrase</span> <span class="o">+</span> <span class="s2">&quot;!&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [&quot;Cool!&quot;, &quot;So yea!&quot;, &quot;Come on!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, what happened there? Well, we started with an array  called <code>avi_says</code>. We called the <code>.collect</code> method on the array which then passed each element into our block. The code in this block simply adds some much needed punctuation to each passed phrase (which all happen to be strings).  But what&rsquo;s <em>really</em> happening? Like I mentioned, we can build our very own version of the <code>collect</code> method.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">amish_array</span><span class="p">(</span><span class="n">array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result_array</span> <span class="o">=</span> <span class="o">[]</span>  <span class="c1"># For locally storing our modified elements</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">iteration</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">array</span><span class="o">.</span><span class="n">length</span> <span class="c1"># Looping 1 time less than our array size</span>
</span><span class='line'>    <span class="n">result_array</span> <span class="o">&lt;&lt;</span> <span class="p">(</span><span class="k">yield</span> <span class="n">array</span><span class="o">[</span><span class="n">iteration</span><span class="o">]</span><span class="p">)</span> <span class="c1"># Yielding each element to the block and saving the return</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="n">result_array</span> <span class="c1"># Returning our modified array</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we use this sick and twisted collect method and pass it the exact same block, we get the same result that we achieved using the built in <code>collect</code> method!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">avi_says</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;Cool&quot;</span><span class="p">,</span> <span class="s2">&quot;So yea&quot;</span><span class="p">,</span> <span class="s2">&quot;Come on&quot;</span><span class="o">]</span>
</span><span class='line'><span class="n">amish_array</span><span class="p">(</span><span class="n">avi_says</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">phrase</span><span class="o">|</span> <span class="n">phrase</span> <span class="o">+</span> <span class="s2">&quot;!&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#=&gt; [&quot;Cool!&quot;, &quot;So yea!&quot;, &quot;Come on!&quot;]</span>
</span></code></pre></td></tr></table></div></figure>


<p>How cool is that?! Let&rsquo;s look at another method within the Enumerable class.</p>

<h2>Include</h2>

<p>The <code>include?</code> method takes a collection as input and iterates through each element comparing them with the passed argument. If any member of the collection matches the passed argument object, the method returns True, otherwise it returns false. The &ldquo;?&rdquo; on the end of the method indicates that true or false will be returned. Oh Ruby, you speak to me.</p>

<p>Let&rsquo;s review the standard behavior and then try to replicate it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">103</span><span class="p">,</span> <span class="s2">&quot;Albatros&quot;</span><span class="p">,</span> <span class="ss">:unitards</span><span class="p">,</span> <span class="s2">&quot;Party&quot;</span><span class="p">,</span> <span class="mi">28</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="s2">&quot;Party&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">array</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s try to break this down (I&rsquo;m taking a small liberty here, by passing in two distinct parameters):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">amish_include?</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="n">object</span><span class="p">)</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="kp">false</span> <span class="c1"># Setting default result to false, unless we find what we&#39;re looking for</span>
</span><span class='line'>  <span class="k">for</span> <span class="n">iteration</span> <span class="k">in</span> <span class="mi">0</span><span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">array</span><span class="o">.</span><span class="n">size</span> <span class="c1"># Looping 1 time less than our array size</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">array</span><span class="o">[</span><span class="n">iteration</span><span class="o">]</span> <span class="o">==</span> <span class="n">object</span> <span class="c1"># Checking for object matches</span>
</span><span class='line'>      <span class="n">result</span> <span class="o">=</span> <span class="kp">true</span> <span class="c1"># Setting our result if object is matched</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">result</span> <span class="c1"># Returning the result</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And when we call our method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">103</span><span class="p">,</span> <span class="s2">&quot;Albatros&quot;</span><span class="p">,</span> <span class="ss">:unitards</span><span class="p">,</span> <span class="s2">&quot;Party&quot;</span><span class="p">,</span> <span class="mi">28</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">masochist_include?</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="ss">:unitards</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; true</span>
</span><span class='line'>
</span><span class='line'><span class="n">masochist_include?</span><span class="p">(</span><span class="n">array</span><span class="p">,</span> <span class="s2">&quot;Loud Noises!&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1">#=&gt; false</span>
</span></code></pre></td></tr></table></div></figure>


<p>What a world! So by breaking down a couple of Ruby&rsquo;s built in Enumerable methods we get a better understanding of what&rsquo;s really going on under the hood.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Go on, Git]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/12/06/go-on-git/"/>
    <updated>2014-12-06T20:04:34-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/12/06/go-on-git</id>
    <content type="html"><![CDATA[<p>Git(hub) - Until very recently, I&rsquo;ve come across it so many times but never actually taken the plunge. Luckily it&rsquo;s very straight forward. There are plenty of great guides already out there but this post gives me a chance to practice using git and markdown.</p>

<h2>Initial Setup</h2>

<p>OK, so the first step was to <a href="http://git-scm.com/">install git</a> on my local machine and create an account on <a href="https://github.com/join">github</a>.</p>

<p>I like using a top-level folder named git which makes it easy to keep track of  my repositiories. The very first thing I needed to do was define my name and email address within git.  To do so, I ran the following two commands in terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --global user.name "YourName"
</span><span class='line'>$ git config --global user.email youremail@example.com</span></code></pre></td></tr></table></div></figure>


<p>To verify, I can run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git config --list</span></code></pre></td></tr></table></div></figure>


<h2>A Project Is Born</h2>

<p>Git works as a version tracking framework that allows for one or multiple people to collaborate on and manage simultaneus streams when working on a project. So for every project, I can have a centralized master version (in this example I&rsquo;m hosting my repository on github) and as many local working versions as I want. Git is so awesome.</p>

<p>Using the terminal, I can create a local project folder by entering in the following commands:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Navigate to your git folder
</span><span class='line'>$ cd git
</span><span class='line'>
</span><span class='line'># Create a folder for my new project
</span><span class='line'>$ mkdir -p party_time
</span><span class='line'>
</span><span class='line'># Navigate to the new folder and create an essential file
</span><span class='line'>$ cd party_time
</span><span class='line'>$ touch invitees.markdown</span></code></pre></td></tr></table></div></figure>


<p>I need to tell git to start paying attention to this project.</p>

<p>So I enter the following command to initialize the git repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git init</span></code></pre></td></tr></table></div></figure>


<p>All I&rsquo;ve done is create an empty repository on github that is ready to accept my files!</p>

<p>After I figured out who I want to invite, I needed to tell git to gather the files to be commited:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .</span></code></pre></td></tr></table></div></figure>


<p>To add a comment and Commit the file(s):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git commit -m "Initial deploy of invitees" -a</span></code></pre></td></tr></table></div></figure>


<p>Now I had to define the link between my local and remote repositories for this project. I have to tell git where it should be pushing and pulling from (in this case it will be my github url).</p>

<p>After creating a public repository named party-time:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git remote add origin ssh://git@github.com:yourusername/party-time.git
</span><span class='line'>
</span><span class='line'># Check it by pulling back a list of remote repositories
</span><span class='line'>$ git remote -v</span></code></pre></td></tr></table></div></figure>


<p>Finally, I&rsquo;ll <strong>push</strong> my file to the remote repository:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push origin master</span></code></pre></td></tr></table></div></figure>


<p>If everything went according to plan, my local and remote repositories are synced.</p>

<p> I like to pull down a fresh copy of my remote repository before messing around with existing files on my local machine.  I do this to ensure that everything is in sync by entering:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git pull origin master</span></code></pre></td></tr></table></div></figure>


<p>So, an easy example for getting familiar with git. Next step, a real code  project on my repository!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hidden Files, Show Yourselves!]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/11/02/hidden-files-show-yourselves/"/>
    <updated>2014-11-02T18:36:35-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/11/02/hidden-files-show-yourselves</id>
    <content type="html"><![CDATA[<p>&ldquo;How do you show hidden files in Finder?&rdquo;</p>

<p>I had no idea but after some googling I wasn&rsquo;t surprised to find that I could change this setting by entering this simple command into terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ defaults write com.apple.finder AppleShowAllFiles YES #Use 'NO' to reverse the effect</span></code></pre></td></tr></table></div></figure>


<p>The change will only take effect after Finder has been restarted - for which we can use the handy <code>killall</code> command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ killall Finder /System/Library/CoreServices/Finder.app</span></code></pre></td></tr></table></div></figure>


<p>Bingo, now I can see hidden files and folders in Finder! But lets take this a step further by creating aliases in <code>.bash_profile</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias reveal='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
</span><span class='line'>alias rehide='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'</span></code></pre></td></tr></table></div></figure>


<p>Now, I can easily toggle the setting from the command line using my aliases:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ reveal
</span><span class='line'>$ rehide</span></code></pre></td></tr></table></div></figure>


<p>Adding efficiency to my workflow has been one of my favorite parts of this programming journey. I&rsquo;m beginning to look at each and every task as a new automation challenge.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[// DOG Part I]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/09/12/slash-slash-dog-part-i/"/>
    <updated>2014-09-12T22:44:49-04:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/09/12/slash-slash-dog-part-i</id>
    <content type="html"><![CDATA[<p>So I’ve always been meaning to write up a guide about how I built and setup my very own personal home media server. The following is meant to be both a memoir and an easy to follow guide that should spell out the process itself and hopefully help others avoid some of the pitfalls that I struggled through but eventually triumphed over. There is SO much to cover, so I’ll be breaking this out into a multi-part series – and off we go!</p>

<h2>A Growing Problem</h2>

<p>I found myself stuck in a recurring cycle. I would buy a new external hard drive and after a period of time, I’d inevitably start running out of space. My only option was to buy another one with a larger capacity. And every time I’d have to go through the painful process of scrubbing and copying all of my data from the old drive to the new drive. It&rsquo;s never fun having to decide “do I really need all 139 episodes of MacGyver?” (of course, the answer to that question is “Yes”). In order to backup the new, and largest capacity, drive I had to spread my files across multiple lower capacity drives. This process was not only prohibitively expensive; it left me with a point in time backup, as opposed to a live-backup.</p>

<p>Clearly I needed a better solution so I started researching the various options out there for backing up, accessing, and streaming my data.</p>

<h2>Requirements</h2>

<p>I learned that choosing the right backup solution totally depends on one&rsquo;s individual needs. My requirements were as follows:</p>

<ul>
<li> Must be expandable. Adding additional capacity down the road should be relatively painless.</li>
<li> Must be remotely accessible. I want to be able to stream data to PCs on my local wireless network, an existing small form factor HTPC, and a rasberri pi.  Mobile streaming is a bonus but wasn’t an absolute must-have.</li>
<li> Must automatically provide data redundancy (i.e. backup!).</li>
<li> Must be able to incorporate all, or at least some, of my existing HDDs</li>
<li> Low-Cost: I wasn&rsquo;t looking to break the bank</li>
</ul>


<h2>To RAID? Or not to RAID? <em>Or unRAID?</em></h2>

<p>You may already have heard of RAID (Redundant Array of Inexpensive or Independent Disks) which to put it simply is a technology for combining multiple drives into a logical unit for data storage. Depending on the type of RAID implementation there are different benefits and drawbacks: be it speed, space, security, etc. which for the purposes of this post I won&rsquo;t delve into. I found that a spin off of RAID, appropriately named unRAID, seemed to offer the best combination of features for my needs.</p>

<p>What is unRAID exactly and why should I care? Well, <a href="http://lime-technology.com/technology/">this website</a> does a pretty good job of explaining it but unRAID was specifically designed for storing and serving digital media across a network while protecting it at the same time. unRAID also would allow me to reuse the hard drives I already own, add capacity as needed, automatically back up my data - unRAID calls this “Parity.” It really seemed like I found…  <strong>THE ALMOST PERFECT SOLUTION!</strong></p>

<p>So having chosen my RAID implementation of choice my next move was to pick out the hardware…</p>

<h2>The little server that could</h2>

<p>One of the best things about building an unRAID server is the optionality one has in terms of hardware choices. Being that unRAID is Linux based, the hardware combinations one can use are nearly endless – which may seem kind of overwhelming at  first. In my case, I wasn’t looking to buy and build a PC component by component so I started researching semi-complete server boxes that would run unRAID.</p>

<p>Luckily, HP just happens to sell these sweet little compact servers with multiple drive capacity. There were several posts on unRAID forums from users who had great success using them as media servers and when I found one of them on sale through Newegg, I pounced. The specific model was the N40L HP Microserver, with a 5-drive capacity (although more than 5 drives can be squeezed in there with a little creativity).</p>

<p>What I loved:</p>

<ul>
<li> Low power draw and very quiet</li>
<li> Compact form factor</li>
<li> Easy Access / Easy Drive Swapping</li>
<li> CHEAP!</li>
</ul>


<p>What I didn&rsquo;t love:</p>

<ul>
<li> Low-Power CPU/GPU – Limits transcoding capability for Plex Purposes</li>
</ul>


<p>The total storage capacity could go up to 20TB using 4TB individual drives. This would give me plenty of headroom for years to come – and as I mentioned earlier unRAID makes increasing capacity very easy so I could always upgrade to larger drives down the road.</p>

<p>Don&rsquo;t get me wrong, you can certainly choose components piece by piece but as far I was concerned the microserver suited my needs just fine.  There were a few other items I needed to purchase before I could get started:</p>

<ul>
<li> USB Key to store and run the actual unRAID software (Required)</li>
<li> 5.25” Drive Bay for adding the 5th Drive (Optional)</li>
<li> eSATA to SATA cable for adding a 6th drive (Optional)</li>
<li> Small SSD to act as an App drive (Optional) – I’ll get into this later</li>
</ul>


<p>With all of my purchases made, I was ready to roll. In part II of this guide, we&rsquo;ll get into the build and software configuration process.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[WELL HELLO THERE]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/09/12/well-hello-there/"/>
    <updated>2014-09-12T20:36:18-04:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/09/12/well-hello-there</id>
    <content type="html"><![CDATA[<p>My name is Alex. This is my very first post and I couldn&rsquo;t be more excited. This blog will be a record of my quest for code literacy. In between, I might even throw in some wildcard content! Like a media server guide, or an op ed!</p>

<p>I&rsquo;ve been going H.A.M. on <a href="http://www.codecademy.com/">Codecademy</a>. Fankly, it&rsquo;s been very challenging but in the best way possible. So now having a bit of HTML, CSS, and Java under my belt I&rsquo;ll be focusing primarily on Ruby going forward.</p>

<p>In addition to keeping track of my coding trials and tribulations, I&rsquo;m also really looking forward to documenting some of my thoughts on technology. Let&rsquo;s do this!</p>
]]></content>
  </entry>
  
</feed>
