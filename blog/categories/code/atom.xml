<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Better Living Through Code]]></title>
  <link href="http://agoldvarg.github.io/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://agoldvarg.github.io/"/>
  <updated>2014-11-02T22:35:22-05:00</updated>
  <id>http://agoldvarg.github.io/</id>
  <author>
    <name><![CDATA[Alex Goldvarg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Go on, Git]]></title>
    <link href="http://agoldvarg.github.io/blog/2014/09/13/go-on-git/"/>
    <updated>2014-09-13T13:04:34-04:00</updated>
    <id>http://agoldvarg.github.io/blog/2014/09/13/go-on-git</id>
    <content type="html"><![CDATA[<p>Git(hub) - I&rsquo;ve come across it so many times but never actually taken the plunge. Luckily it&rsquo;s very straight forward. There are plenty of great guides already out there but this post gives me a chance to practice using git and markdown.</p>

<h2>Initial Setup</h2>

<p>OK, so the first step was to <a href="http://git-scm.com/">install git</a> on my local machine and create an account on <a href="https://github.com/join">github</a>.</p>

<p>I like using a top-level folder named git which makes it easy to keep track of  my repositiories. The very first thing I needed to do was define my name and email address within git.  To do so, I ran the following two commands in terminal:</p>

<pre><code>$ git config --global user.name "YourName"
$ git config --global user.email youremail@example.com
</code></pre>

<p>To verify, I can run:</p>

<pre><code>$ git config --list
</code></pre>

<h2>A Project Is Born</h2>

<p>Git works as a version tracking framework that allows for one or multiple people to collaborate on and manage simultaneus streams when working on a project. So for every project, I can have a centralized master version (in this example I&rsquo;m hosting my repository on github) and as many local working versions as I want. Git is so awesome.</p>

<p>Using the terminal, I can create a local project folder by entering in the following commands:</p>

<pre><code># Navigate to your git folder
$ cd git

# Create a folder for my new project
$ mkdir -p party_time

# Navigate to the new folder and create an essential file
$ cd party_time
$ touch invitees.markdown
</code></pre>

<p>I need to tell git to start paying attention to this project.</p>

<p>So I enter the following command to initialize the git repository:</p>

<pre><code>$ git init
</code></pre>

<p>All I&rsquo;ve done is create an empty repository on github that is ready to accept my files!</p>

<p>After I figured out who I want to invite, I needed to tell git to gather the files to be commited:</p>

<pre><code>$ git add .
</code></pre>

<p>To add a comment and Commit the file(s):</p>

<pre><code>$ git commit -m "Initial deploy of invitees" -a
</code></pre>

<p>Now I had to define the link between my local and remote repositories for this project. I have to tell git where it should be pushing and pulling from (in this case it will be my github url).</p>

<p>After creating a public repository named party-time:</p>

<pre><code>$ git remote add origin ssh://git@github.com:yourusername/party-time.git

# Check it by pulling back a list of remote repositories
$ git remote -v
</code></pre>

<p>Finally, I&rsquo;ll <strong>push</strong> my file to the remote repository:</p>

<pre><code>$ git push origin master
</code></pre>

<p>If everything went according to plan, my local and remote repositories are synced.</p>

<p> I like to pull down a fresh copy of my remote repository before messing around with existing files on my local machine.  I do this to ensure that everything is in sync by entering:</p>

<pre><code>$ git pull origin master
</code></pre>

<p>So, an easy example for getting familiar with git. Next step, a real code  project on my repository!</p>
]]></content>
  </entry>
  
</feed>
