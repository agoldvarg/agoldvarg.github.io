<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron | Better Living Through Code]]></title>
  <link href="http://agoldvarg.github.io/blog/categories/flatiron/atom.xml" rel="self"/>
  <link href="http://agoldvarg.github.io/"/>
  <updated>2015-02-15T16:40:35-05:00</updated>
  <id>http://agoldvarg.github.io/</id>
  <author>
    <name><![CDATA[Alex Goldvarg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keyword Arguments]]></title>
    <link href="http://agoldvarg.github.io/blog/2015/02/14/keyword-arguments/"/>
    <updated>2015-02-14T22:13:50-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2015/02/14/keyword-arguments</id>
    <content type="html"><![CDATA[<p>Keyword arguments were rolled out as part of the Ruby 2.0 release. And recently I&rsquo;ve run into them as part of the &lsquo;Green Grocer&rsquo; lab at <a href="http://flatironschool.com/">Flatiron</a>. I was able to pass the lab using deductive reasoning but I didn&rsquo;t fully grasp the concept. This blog post is my penance.</p>

<p>Let&rsquo;s start with a simple method <code>manipulate_string</code> that expects to receive two arguments; a String followed by an Integer:</p>

<pre><code class="ruby">def manipulate_string(string, volume)
  if volume &gt; 6
    puts string.upcase
  else
    puts string.downcase
  end
end

manipulate_string("let's jam", 8)
manipulate_string("bingo bango", 2)
# as expected:
#=&gt; LET'S JAM
#=&gt; bingo bango

# But, if we get a little bit wild:
manipulate_string("time to jam")
manipulate_string(2, "bingo bango")
#=&gt; ArgumentError: wrong number of arguments (1 for 2)
#=&gt; ArgumentError: comparison of String with 6 failed
</code></pre>

<p>So, the <code>manipulate_string</code> method does exactly what its asked. But knowing that computers don&rsquo;t make assumptions we can&rsquo;t expect the ruby interpreter to decide which argument is which.</p>

<p>In other words, this method as written lacks <a href="https://en.wikipedia.org/wiki/Robustness_%28computer_science%29">robustness</a> in two obvious ways. First, it can only respond to the exact amount of arguments expected. And two, it&rsquo;s arguments must be given in the exact order as defined in the method.</p>

<p>We can code around the first weakness pretty easily by assigning defaults to an argument. For example:</p>

<pre><code class="ruby">def manipulate_string(string, volume=5)
  if volume &gt; 6
    puts string.upcase
  else
    puts string.downcase
  end
end

manipulate_string("let's jam")
#=&gt; let's jam
</code></pre>

<p>But it&rsquo;s a bit more difficult to protect against the second issue where we attempt to pass arguments out of order&hellip;</p>

<pre><code class="ruby">def manipulate_string(string, volume)
  if string.is_a?(String)
    if volume &gt; 6
      puts string.upcase
    else
      puts string.downcase
    end
  end
end

manipulate_string(2, "bingo bango")
manipulate_string("bingo bango", 2)
#=&gt; bingo bango
#=&gt; bingo bango
</code></pre>

<p>Our method is getting ugly very quickly. And the prior fix didn&rsquo;t really address the issue completely. Maybe we could modify our method to accept a hash with default values:</p>

<pre><code class="ruby">def manipulate_string(options = { string: "hello", volume: 5 })
  if options[:volume] &gt; 6
    puts options[:string].upcase
  else
    puts options[:string].downcase
  end
end

manipulate_string(string: "Good Times", volume: 9)
manipulate_string(volume: 4, string: "Be Quiet")
#=&gt; GOOD TIMES
#=&gt; be quiet
</code></pre>

<p>The previous revision works a <em>little bit</em> better in that we can now accept arguments in any order. But what happens if we leave out one of the arguments:</p>

<pre><code class="ruby">manipulate_string(string: "Be Quiet")
#=&gt; NoMethodError: undefined method `&gt;' for nil:NilClass
</code></pre>

<p>You can see that we run into the number of required arguments issue again. This is fixable but our method is going to get more complex:</p>

<pre><code class="ruby">def manipulate_string( options = {} )
  defaults = { string: "hello", volume: 5 }
  options = defaults.merge(options)

  if options[:volume] &gt; 6
    puts options[:string].upcase
  else
    puts options[:string].downcase
  end
end

manipulate_string(string: "Good Times", volume: 9)
manipulate_string(volume: 4, string: "Be Quiet")
manipulate_string(string: "Be Quiet")
#=&gt; GOOD TIMES
#=&gt; be quiet
#=&gt; be quiet
</code></pre>

<p>WAHOOO! We did it! Although something about the above revision just doesn&rsquo;t <em>feel</em> very Ruby-like. You might be thinking - &ldquo;when is he going to get to the point?!&rdquo; OK, here we go - by using <strong>Keyword Arguments</strong>, we can vastly improve the simplicity and readibility of our previous method without sacrificing any of the functionality. Let&rsquo;s take a look at our example:</p>

<pre><code class="ruby">def manipulate_string(string: "Nice to see you", volume: 7)
  if volume &gt; 6
    puts string.upcase
  else
    puts string.downcase
  end
end
</code></pre>

<p>Notice the <code>key: value</code> structure as we define the arguments? We can call this new and improved method without worrying about missing and/or out-of-order arguments:</p>

<pre><code class="ruby">manipulate_string(volume: 4, string: "Be Quiet")
manipulate_string(string: "Good Times")
manipulate_string(volume: 3)
#=&gt; be quiet
#=&gt; GOOD TIMES
#=&gt; nice to see you
</code></pre>

<p>Wonderful! So Ruby can posit that you&rsquo;re passing in hash pairs for these arguments. It also knows that you want to have defaults, and it doesn&rsquo;t care what order you pass each argument into the method. Now that&rsquo;s what I call robust!</p>

<h2>Closing Thoughts</h2>

<p>To sum it up, keyword arguments allow you to create dynamic methods able to accept arguments in a multitude of ways. I&rsquo;ll be keeping this tool handy when coding methods going forward. Thanks for reading and keep coding!</p>

<p><strong>Resources</strong></p>

<ul>
<li>Cooper Press - <a href="https://www.youtube.com/watch?v=u8Q6Of_mScI">6 Minute Guide to Keyword Arguments in Ruby 2.0</a></li>
<li>Seiji Naganuma - <a href="http://www.seijinaganuma.com/2015/02/keyword-arguments-in-ruby/">Keyword Arguments in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[All Right Stop. Enumerate and Listen...]]></title>
    <link href="http://agoldvarg.github.io/blog/2015/02/10/all-right-stop/"/>
    <updated>2015-02-10T20:48:31-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2015/02/10/all-right-stop</id>
    <content type="html"><![CDATA[<p>&hellip;Ruby&rsquo;s back with a brand new iteration.</p>

<iframe src="//giphy.com/embed/ufXEskx0lCtxK?html5=true" width="336" height="189" frameBorder="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen></iframe>


<p>You heard right, the <a href="http://ruby-doc.org/core-2.2.0/Enumerable.html">Enumerable</a> mixin is all about <strong>iteration</strong>, <strong>manipulation</strong> (and  heavy helping of <strong>consternation</strong>).</p>

<p>Learning how to use Enumerable methods to manipulate data and objects has been one the most exciting revelations since starting to program with Ruby. But to truly understand Enumerable, it helps to drill-down into what the methods are actually doing with the data inputs, how they yield in and out of passed blocks, and finally what kind of results they return.</p>

<h2>Collect</h2>

<p>Within Enumerable, there are several methods that can be used to search through, or filter over a collection of elements. Let&rsquo;s look at <code>collect</code>.  The collect method returns a new array after it yields each element in the original collection into the passed block. Here&rsquo;s a simple example:</p>

<pre><code class="ruby">avi_says = ["Cool", "So yea", "Come on"]

excited_avi_says = avi_says.collect { |phrase| phrase + "!" }

#=&gt; ["Cool!", "So yea!", "Come on!"]
</code></pre>

<p>So, what happened there? Well, we started with an array  called <code>avi_says</code>. We called the <code>.collect</code> method on the array which then passed each element into our block. The code in this block simply adds some much needed punctuation to each passed phrase (which all happen to be strings).  But what&rsquo;s <em>really</em> happening? Like I mentioned, we can build our very own version of the <code>collect</code> method.</p>

<pre><code class="ruby">def amish_array(array)
  result_array = []  # For locally storing our modified elements
  for iteration in 0...array.length # Looping 1 time less than our array size
    result_array &lt;&lt; (yield array[iteration]) # Yielding each element to the block and saving the return
  end
result_array # Returning our modified array
end
</code></pre>

<p>When we use this sick and twisted collect method and pass it the exact same block, we get the same result that we achieved using the built in <code>collect</code> method!
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">avi_says</span> <span class="o">=</span> <span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Cool</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">So</span> <span class="n">yea</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Come</span> <span class="n">on</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">]</span>
</span><span class='line'><span class="n">amish_array</span><span class="p">(</span><span class="n">avi_says</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">phrase</span><span class="o">|</span> <span class="n">phrase</span> <span class="o">+</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">!&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">}</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;h1&gt;=&gt; [&amp;ldquo;Cool!&amp;rdquo;, &amp;ldquo;So yea!&amp;rdquo;, &amp;ldquo;Come on!&amp;rdquo;]&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="no">How</span> <span class="n">cool</span> <span class="n">is</span> <span class="n">that?</span><span class="o">!</span> <span class="no">Let</span><span class="s1">&#39;s look at another method within the Enumerable class.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Include</span>
</span><span class='line'><span class="s1">-----------</span>
</span><span class='line'>
</span><span class='line'><span class="s1">The `include?` method takes a collection as input and iterates through each element comparing them with the passed argument. If any member of the collection matches the passed argument object, the method returns True, otherwise it returns false. The &quot;?&quot; on the end of the method indicates that true or false will be returned. Oh Ruby, you speak to me.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Let&#39;</span><span class="n">s</span> <span class="n">review</span> <span class="n">the</span> <span class="n">standard</span> <span class="n">behavior</span> <span class="ow">and</span> <span class="k">then</span> <span class="n">try</span> <span class="n">to</span> <span class="n">replicate</span> <span class="ss">it</span><span class="p">:</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="mi">103</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Albatros</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="ss">:unitards</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="no">Party</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="mi">28</span><span class="o">]&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;array.include?(&amp;ldquo;Party&amp;rdquo;)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="kp">true</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;array.include?(50)&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;=&gt;</span> <span class="kp">false</span><span class="o">&lt;</span><span class="sr">/h1&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'><span class="sr">Let&#39;s try to break this down (I&#39;m taking a small liberty here, by passing in two distinct parameters):</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;def amish_include?(array, object)</span>
</span><span class='line'><span class="sr">  result = false # Setting default result to false, unless we find what we&amp;rsquo;re looking for</span>
</span><span class='line'><span class="sr">  for iteration in 0&amp;hellip;array.size # Looping 1 time less than our array size</span>
</span><span class='line'><span class="sr">    if array[iteration] == object # Checking for object matches</span>
</span><span class='line'><span class="sr">      result = true # Setting our result if object is matched</span>
</span><span class='line'><span class="sr">    end</span>
</span><span class='line'><span class="sr">  end</span>
</span><span class='line'><span class="sr">  result # Returning the result</span>
</span><span class='line'><span class="sr">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And when we call our method:</p>

<pre><code class="ruby">array = [103, "Albatros", :unitards, "Party", 28]

masochist_include?(array, :unitards)
#=&gt; true

masochist_include?(array, "Loud Noises!")
#=&gt; false
</code></pre>

<p>What a world! So by breaking down a couple of Ruby&rsquo;s built in Enumerable methods we get a better understanding of what&rsquo;s really going on under the hood.</p>
]]></content>
  </entry>
  
</feed>
