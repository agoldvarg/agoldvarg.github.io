<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Flatiron, | Better Living Through Code]]></title>
  <link href="http://agoldvarg.github.io/blog/categories/flatiron/atom.xml" rel="self"/>
  <link href="http://agoldvarg.github.io/"/>
  <updated>2015-02-15T13:09:55-05:00</updated>
  <id>http://agoldvarg.github.io/</id>
  <author>
    <name><![CDATA[Alex Goldvarg]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Keyword Arguments]]></title>
    <link href="http://agoldvarg.github.io/blog/2015/02/14/keyword-arguments/"/>
    <updated>2015-02-14T22:13:50-05:00</updated>
    <id>http://agoldvarg.github.io/blog/2015/02/14/keyword-arguments</id>
    <content type="html"><![CDATA[<p>Keyword arguments were rolled out as part of the Ruby 2.0 release. And recently I&rsquo;ve run into them as part of the &lsquo;Green Grocer&rsquo; lab at flatiron. I was able to get the lab passing by deductive reasoning but I didn&rsquo;t fully grasp the concept. This blog post is my penance.</p>

<p>Let&rsquo;s start with a simple method <code>manipulate_string</code> that expects to receive two arguments; a String and then an Integer:</p>

<pre><code class="ruby">def manipulate_string(string, volume)
  if volume &gt; 6
    puts string.upcase
  else
    puts string.downcase
  end
end

manipulate_string("let's jam", 8)
manipulate_string("bingo bango", 2)
# as expected:
#=&gt; LET'S JAM
#=&gt; bingo bango

# But, if we get a little bit wild:
manipulate_string("time to jam")
manipulate_string(2, "bingo bango")
#=&gt; ArgumentError: wrong number of arguments (1 for 2)
#=&gt; ArgumentError: comparison of String with 6 failed
</code></pre>

<p>So, the <code>manipulate_string</code> method does exactly what it&rsquo;s asked. But we know that computers don&rsquo;t like to make assumptions. And so we can&rsquo;t expect the ruby interpreter to make these kinds of decisions.</p>

<p>This method, as written, lacks <a href="https://en.wikipedia.org/wiki/Robustness_%28computer_science%29">robustness</a> in two obvious ways. For one, can only receive an exact amount of arguments. And two, arguments must also be given in the exact order.</p>

<p>We can code around the first weakness pretty easily by assigning defaults to each argument:</p>

<pre><code class="ruby">def manipulate_string(string, volume=5)
  if volume &gt; 6
    puts string.upcase
  else
    puts string.downcase
  end
end

manipulate_string("let's jam")
#=&gt; let's jam
</code></pre>

<p>But it&rsquo;s a bit more difficult to protect against the second issue of passing arguments out of order&hellip;</p>

<pre><code class="ruby">def manipulate_string(string, volume)
  if string.is_a?(String)
    if volume &gt; 6
      puts string.upcase
    else
      puts string.downcase
    end
  end
end

manipulate_string(2, "bingo bango")
manipulate_string("bingo bango", 2)
#=&gt; bingo bango
#=&gt; bingo bango
</code></pre>

<p>That got ugly very quickly. And this fix didn&rsquo;t really address the issue completely. Maybe, we could modify our method to accept a hash, with default values:</p>

<pre><code class="ruby">def manipulate_string(options = { string: "hello", volume: 5 })
  if options[:volume] &gt; 6
    puts options[:string].upcase
  else
    puts options[:string].downcase
  end
end

manipulate_string(string: "Good Times", volume: 9)
manipulate_string(volume: 4, string: "Be Quiet")
#=&gt; GOOD TIMES
#=&gt; be quiet
</code></pre>

<p>The previous revision works a <em>bit</em> better. We can now accept arguments in any order. But what happens if we leave out one of the arguments:</p>

<pre><code class="ruby">manipulate_string(string: "Be Quiet")
#=&gt; NoMethodError: undefined method `&gt;' for nil:NilClass
</code></pre>

<p>You can see that we&rsquo;ll run into the same issue. We can fix this as well - but our method is going to get a bit more complicated:</p>

<pre><code class="ruby">def manipulate_string( options = {} )
  defaults = { string: "hello", volume: 5 }
  options = defaults.merge(options)

  if options[:volume] &gt; 6
    puts options[:string].upcase
  else
    puts options[:string].downcase
  end
end

manipulate_string(string: "Good Times", volume: 9)
manipulate_string(volume: 4, string: "Be Quiet")
manipulate_string(string: "Be Quiet")
#=&gt; GOOD TIMES
#=&gt; be quiet
#=&gt; be quiet
</code></pre>

<p>WAHOOO! We did it! Although something about the above method just doesn&rsquo;t <em>feel</em> very Ruby-like. You might be thinking - &ldquo;when is he going to get to teh point?!&rdquo; OK, here we go - by using <strong>Keyword Arguments</strong>, we can vastly improve the simplicity and readibility of our previous method without sacrificing any of the functionality. Let&rsquo;s take a look at an example:</p>

<pre><code class="ruby">def manipulate_string(string: "Nice to see you", volume: 7)
  if volume &gt; 6
    puts string.upcase
  else
    puts string.downcase
  end
end
</code></pre>

<p>Notice the <code>key: value</code> structure as we define the arguments? We can call this new and improved method and pass missing and/or out-of-order arguments:</p>

<pre><code class="ruby">manipulate_string(volume: 4, string: "Be Quiet")
manipulate_string(string: "Good Times")
manipulate_string(volume: 3)
#=&gt; be quiet
#=&gt; GOOD TIMES
#=&gt; nice to see you
</code></pre>

<p>Wonderful! Ruby can posit that you&rsquo;re passing in hash pairs for arguments. It also knows that you want to have defaults for those arguments, and it doesn&rsquo;t care what order you pass them into the method. That&rsquo;s what I call robust!</p>

<h2>Closing thoughts</h2>

<p>To sum it up, keyword arguments allow you to create dynamic methods that are able to accept arguments in a multitue of ways. I&rsquo;ll definitely keep this tool in my bag of tricks when coding methods going forward. Thanks for reading! Keep coding!</p>

<p><strong>Resources</strong></p>

<ul>
<li>Cooper Press - <a href="https://www.youtube.com/watch?v=u8Q6Of_mScI">6 Minute Guide to Keyword Arguments in Ruby 2.0</a></li>
<li>Seiji Naganuma - <a href="http://www.seijinaganuma.com/2015/02/keyword-arguments-in-ruby/">Keyword Arguments in Ruby</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
