---
layout: post
title: "Go On, Git"
date: 2014-09-13 13:04:34 -0400
comments: true
categories: [code, how-to, guide]
---

Git(hub) - I've come across it so many times but never actually taken the plunge. Luckily it's very straight forward. There are plenty of great guides already out there but this post gives me a chance to practice using git and markdown.

Initial Setup
-------------

OK, so the first step was to [install git](http://git-scm.com/) on my local machine and create an account on [github](https://github.com/join).

I like using a top-level folder named git which makes it easy to keep track of  my repositiories. The very first thing I needed to do was define my name and email address within git.  To do so, I ran the following two commands in terminal:

```
$ git config --global user.name "YourName"
$ git config --global user.email youremail@example.com
```

To verify, I can run:

```
$ git config --list
```

A Project Is Born
-----------------

Git works as a version tracking framework that allows for one or multiple people to collaborate on and manage simultaneus streams when working on a project. So for every project, I can have a centralized master version (in this example I'm hosting my repository on github) and as many local working versions as I want. Git is so awesome.

Using the terminal, I can create a local project folder by entering in the following commands:

```
# Navigate to your git folder
$ cd git

# Create a folder for my new project
$ mkdir -p party_time

# Navigate to the new folder and create an essential file
$ cd party_time
$ touch invitees.markdown
```

I need to tell git to start paying attention to this project.

So I enter the following command to initialize the git repository:

```
$ git init
```

All I've done is create an empty repository on github that is ready to accept my files!

After I figured out who I want to invite, I needed to tell git to gather the files to be commited:

```
$ git add .
```

To add a comment and Commit the file(s):

```
$ git commit -m "Initial deploy of invitees" -a
```

Now I had to define the link between my local and remote repositories for this project. I have to tell git where it should be pushing and pulling from (in this case it will be my github url).

After creating a public repository named party-time:

```
$ git remote add origin ssh://git@github.com:yourusername/party-time.git

# Check it by pulling back a list of remote repositories
$ git remote -v
```
Finally, I'll **push** my file to the remote repository:

```
$ git push origin master
```
If everything went according to plan, my local and remote repositories are synced.

 I like to pull down a fresh copy of my remote repository before messing around with existing files on my local machine.  I do this to ensure that everything is in sync by entering:

```
$ git pull origin master
```

So, an easy example for getting familiar with git. Next step, a real code  project on my repository!